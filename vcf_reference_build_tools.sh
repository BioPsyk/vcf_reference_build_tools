#!/usr/bin/env bash

# This script is a wrapper to run the singularity image of this pipeline, where folders are parsed and mounted in the right place.

################################################################################
# Help page
################################################################################

function general_usage(){
 echo "Usage:"
 echo " ./vcf_reference_build_tools.sh -i <file> -o <dir>"
 echo ""
 echo ""
 echo "options:"
 echo "-h		 Display help message for pgscalculator"
 echo "-i <file> 	 path to vcf"
 echo "-b <string> 	 genome build (default: GRCh37)"
 echo "-m <file> 	 map file generated by make_map"
 echo "-r <dir> 	 dbsnp reference folder, created by cleansumstats"
 echo "-o <dir> 	 path to output directory"
 echo "-t <dir> 	 path to system tmp or scratch (default: /tmp)"
 echo "-w <dir> 	 path to workdir/intermediate files (default: work)"
 echo "-d  	 	 dev mode, no cleanup of intermediates(default: not active)"
 echo "-v  	 	 get the version number"
 echo ""
 
}

################################################################################
# Prepare path parsing
################################################################################
# All paths we see will start from the project root, even if the command is called from somewhere else
present_dir="${PWD}"
project_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

################################################################################
# Parameter parsing
################################################################################
# whatever the input make it array
paramarray=($@)

# check for modifiers
if [ ${paramarray[0]} == "make_map" ] ; then
  runtype="make_map"
  # remove modifier, 1st element
  paramarray=("${paramarray[@]:1}")
elif [ ${paramarray[0]} == "insert_map_in_vcf" ] ; then
  runtype="insert_map_in_vcf"
  # remove modifier, 1st element
  paramarray=("${paramarray[@]:1}")
else
  runtype=""
fi

# starting getops with :, puts the checking in silent mode for errors.
getoptsstring=":hvdi:o:b:w:r:t:m:"

# default
infile=""
mapfile=""
build="GRCh37"
refdir=""
outdir="out"
tmpdir="/tmp"
workdir="${present_dir}/work"
devmode=""

# some logical defaults
infile_given=false
mapfile_given=false
build_given=false
refdir_given=false
outdir_given=false
tmpdir_given=false
workdir_given=false
devmode_given=false


while getopts "${getoptsstring}" opt "${paramarray[@]}"; do
  case ${opt} in
    h )
      general_usage 1>&2
      exit 0
      ;;
    v )
      #write a something that parses the actual version number
      cat ${project_dir}/VERSION 1>&2
      exit 0
      ;;
    i )
      infile="$OPTARG"
      infile_given=true
      ;;
    b )
      build="$OPTARG"
      build_given=true
      ;;
    r )
      refdir="$OPTARG"
      refdir_given=true
      ;;
    m )
      mapfile="$OPTARG"
      mapfile_given=true
      ;;
    o )
      outdir="$OPTARG"
      outdir_given=true
      ;;
    t )
      tmpdir="$OPTARG"
      tmpdir_given=true
      ;;
    w )
      workdir="$OPTARG"
      workdir_given=true
      ;;
    d )
      devmode="--dev"
      devmode_given=true
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done

################################################################################
# Check if the provided paths exist
################################################################################

# make outdir if it doesn't already exist
mkdir -p ${outdir}
mkdir -p ${workdir}
mkdir -p ${tmpdir}

infile_host=$(realpath "${infile}")
outdir_host=$(realpath "${outdir}")
tmpdir_host=$(realpath "${tmpdir}")
workdir_host=$(realpath "${workdir}")

# Test that file and folder exists, all of these will always get mounted
if [ ! -f $infile_host ]; then
  >&2 echo "infile doesn't exist"
  >&2 echo "path tried: $infile_host"
  exit 1
fi

if [ ! -d $outdir_host ]; then
  >&2 echo "outdir doesn't exist"
  exit 1
fi

if [ ! -d $tmpdir_host ]; then
  >&2 echo "tmpdir doesn't exist"
  exit 1
fi

if [ ! -d $workdir_host ]; then
  >&2 echo "workdir doesn't exist"
  exit 1
fi

if [ ${runtype} == "make_map" ] ; then
  reffold_host=$(realpath "${refdir}")
  if [ ! -d $reffold_host ]; then
    >&2 echo "reffold doesn't exist"
    >&2 echo "path tried: $reffold_host"
    exit 1
  fi
  reffold_container="/vcf_reference_build_tools/reffold"
fi

if [ ${runtype} == "insert_map_in_vcf" ] ; then
  mapfile_host=$(realpath "${mapfile}")
  if [ ! -f $mapfile_host ]; then
    >&2 echo "mapfile doesn't exist"
    >&2 echo "path tried: $mapfile_host"
    exit 1
  fi
  mapfold_host=$(dirname "${mapfile_host}")
  mapfile_name=$(basename "${mapfile_host}")
  mapfold_container="/vcf_reference_build_tools/mapfile"
  mapfile_container="${mapfold_container}/${mapfile_name}"
fi

################################################################################
# Check allowed input for non mounted variables
################################################################################

if [ "${build}" != "GRCh37" ] && [ "${build}" != "GRCh38" ]; then
  >&2 echo "build: ${build} is not available, try with GRCh37 or GRCh38"
  exit 1
fi

################################################################################
# Prepare container variables
################################################################################

# All paths we see will start from the project root, even if the command is called from somewhere else
project_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "${project_dir}/scripts/init-containerization.sh"

mount_flags=$(format_mount_flags "-B")

# indir
infold_host=$(dirname "${infile_host}")
infile_name=$(basename "${infile_host}")
indir_container="/vcf_reference_build_tools/input"
infile_container="${indir_container}/${infile_name}"

# outdir
outdir_container="/vcf_reference_build_tools/outdir"

# tmpdir
tmpdir_container="/tmp"

# workdir
workdir_container="/vcf_reference_build_tools/work"

# Use outdir as fake home to avoid lock issues for the hidden .nextflow/history file
FAKE_HOME="${outdir_container}"
export SINGULARITY_HOME="${FAKE_HOME}"
export APPTAINER_HOME="${FAKE_HOME}"


if [ "${runtype}" == "make_map" ]; then
  main_script="/vcf_reference_build_tools/make_map.nf"
  singularity run \
     --contain \
     --cleanenv \
     ${mount_flags} \
     -B "${infold_host}:${indir_container}" \
     -B "${outdir_host}:${outdir_container}" \
     -B "${reffold_host}:${reffold_container}" \
     -B "${tmpdir_host}:${tmpdir_container}" \
     -B "${workdir_host}:${workdir_container}" \
     "tmp/${singularity_image_tag}" \
     nextflow \
       -log "${outdir_container}/.nextflow.log" \
       run ${main_script} \
       ${devmode} \
       --input "${infile_container}" \
       --dbsnpdir "${reffold_container}" \
       --build "${build}" \
       --outdir "${outdir_container}" 
elif [ "${runtype}" == "insert_map_in_vcf" ]; then
  main_script="/vcf_reference_build_tools/insert_map_in_vcf.nf"
  singularity run \
     --contain \
     --cleanenv \
     ${mount_flags} \
     -B "${infold_host}:${indir_container}" \
     -B "${outdir_host}:${outdir_container}" \
     -B "${mapfold_host}:${mapfold_container}" \
     -B "${tmpdir_host}:${tmpdir_container}" \
     -B "${workdir_host}:${workdir_container}" \
     "tmp/${singularity_image_tag}" \
     nextflow \
       -log "${outdir_container}/.nextflow.log" \
       run ${main_script} \
       ${devmode} \
       --input "${infile_container}" \
       --mapfile "${mapfile_container}" \
       --build "${build}" \
       --outdir "${outdir_container}" 
else
  echo "option does not exist"
  exit 1
fi


#Set correct permissions to pipeline_info files
#chmod -R ugo+rwX ${outdir_host}/pipeline_info

#remove .nextflow directory by default
if ${devmode_given} ;
then
  :
else
  function cleanup {
    echo ">> Cleaning up (disable with -l) "
    echo ">> Removing ${outdir_host}/.nextflow"
    rm -r ${outdir_host}/.nextflow
    echo ">> Done"
  }
  trap cleanup EXIT
fi
 
echo "vcf_reference_build_tools.sh reached the end: $(date)"
